"use strict";var v=Object.create;var y=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var S=(r,e,s,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of I(e))!k.call(r,o)&&o!==s&&y(r,o,{get:()=>e[o],enumerable:!(n=W(e,o))||n.enumerable});return r};var z=(r,e,s)=>(s=r!=null?v(_(r)):{},S(e||!r||!r.__esModule?y(s,"default",{value:r,enumerable:!0}):s,r));const t=require("electron"),d=require("path"),E=require("keytar"),M=require("macaddress"),F=require("os"),P=require("fs");function h(r){const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(r){for(const s in r)if(s!=="default"){const n=Object.getOwnPropertyDescriptor(r,s);Object.defineProperty(e,s,n.get?n:{enumerable:!0,get:()=>r[s]})}}return e.default=r,Object.freeze(e)}const m=h(E),T=h(M),b=h(F),w=h(P),O=process.env.NODE_ENV==="development",f="insightful-time-tracker",p="auth-token",g=d.join(b.homedir(),".insightful-token");class j{constructor(){this.mainWindow=null,this.screenshotInterval=null}async createWindow(){this.mainWindow=new t.BrowserWindow({width:1e3,height:700,minWidth:800,minHeight:600,show:!1,icon:d.join(__dirname,"../public/icon.png"),webPreferences:{nodeIntegration:!1,contextIsolation:!0,enableRemoteModule:!1,preload:d.join(__dirname,"preload.js"),webSecurity:!0}}),O?(await this.mainWindow.loadURL("http://localhost:5173"),this.mainWindow.webContents.openDevTools()):await this.mainWindow.loadFile(d.join(__dirname,"../dist/index.html")),this.mainWindow.once("ready-to-show",()=>{var e;(e=this.mainWindow)==null||e.show()}),this.mainWindow.on("closed",()=>{this.mainWindow=null,this.screenshotInterval&&clearInterval(this.screenshotInterval)})}setupIPC(){t.ipcMain.handle("auth:store-token",async(e,s)=>{try{return await m.setPassword(f,p,s),{success:!0}}catch(n){console.error("Keytar failed, using file fallback:",n);try{return w.writeFileSync(g,s,{mode:384}),{success:!0}}catch(o){return console.error("File storage also failed:",o),{success:!1,error:o.message}}}}),t.ipcMain.handle("auth:get-token",async()=>{try{return{success:!0,token:await m.getPassword(f,p)}}catch(e){console.error("Keytar failed, using file fallback:",e);try{return w.existsSync(g)?{success:!0,token:w.readFileSync(g,"utf8")}:{success:!1,error:"No token found"}}catch(s){return console.error("File storage also failed:",s),{success:!1,error:s.message}}}}),t.ipcMain.handle("auth:remove-token",async()=>{try{return await m.deletePassword(f,p),{success:!0}}catch(e){return console.error("Failed to remove token:",e),{success:!1,error:e.message}}}),t.ipcMain.handle("system:get-network-info",async()=>{try{const e=b.networkInterfaces();let s="127.0.0.1";for(const[o,c]of Object.entries(e))if(c){for(const a of c)if(a.family==="IPv4"&&!a.internal){s=a.address;break}}const n=await new Promise((o,c)=>{T.one((a,u)=>{a?c(a):o(u)})});return{success:!0,ipAddress:s,macAddress:n}}catch(e){return console.error("Failed to get network info:",e),{success:!1,error:e.message,ipAddress:"127.0.0.1",macAddress:"00:00:00:00:00:00"}}}),t.ipcMain.handle("screenshot:capture",async()=>{try{const{desktopCapturer:e}=await import("electron");console.log("Starting screenshot capture...");const s=await e.getSources({types:["screen","window"],thumbnailSize:{width:1920,height:1080},fetchWindowIcons:!1});if(console.log("Found",s.length,"sources:"),s.forEach((i,l)=>{console.log(`Source ${l}:`,i.name,"id:",i.id)}),s.length===0)throw new Error("No displays found");let n=s.find(i=>i.name.includes("Entire screen")||i.name.includes("Screen"))||s[0];console.log("Using source:",n.name,"id:",n.id);const o=n.thumbnail,c=o.isEmpty();if(console.log("Thumbnail empty?",c,"size:",o.getSize()),c){console.log("Thumbnail is empty, trying alternative sources...");for(let i=1;i<s.length;i++){const l=s[i];if(console.log("Trying alternative source:",l.name),!l.thumbnail.isEmpty()){n=l,console.log("Found non-empty source:",n.name);break}}}const a=n.thumbnail.toPNG(),u=a.toString("base64");return console.log("Screenshot captured successfully"),console.log("- Source:",n.name),console.log("- Buffer size:",a.length,"bytes"),console.log("- Base64 length:",u.length),console.log("- Thumbnail size:",n.thumbnail.getSize()),{success:!0,data:u,timestamp:new Date().toISOString(),permission:!0,source:n.name,size:n.thumbnail.getSize()}}catch(e){return console.error("Failed to capture screenshot:",e),{success:!1,error:e.message,permission:!1}}}),t.ipcMain.handle("screenshot:start-schedule",async(e,s=5)=>{try{return this.screenshotInterval&&clearInterval(this.screenshotInterval),this.screenshotInterval=setInterval(()=>{var n;(n=this.mainWindow)==null||n.webContents.send("screenshot:trigger")},s*60*1e3),{success:!0}}catch(n){return console.error("Failed to start screenshot schedule:",n),{success:!1,error:n.message}}}),t.ipcMain.handle("screenshot:stop-schedule",async()=>{try{return this.screenshotInterval&&(clearInterval(this.screenshotInterval),this.screenshotInterval=null),{success:!0}}catch(e){return console.error("Failed to stop screenshot schedule:",e),{success:!1,error:e.message}}}),t.ipcMain.handle("fs:show-save-dialog",async(e,s)=>{try{return await t.dialog.showSaveDialog(this.mainWindow,s)}catch(n){return console.error("Failed to show save dialog:",n),{canceled:!0,error:n.message}}}),t.ipcMain.handle("shell:open-external",async(e,s)=>{try{return await t.shell.openExternal(s),{success:!0}}catch(n){return console.error("Failed to open external URL:",n),{success:!1,error:n.message}}}),t.ipcMain.handle("window:minimize",()=>{var e;(e=this.mainWindow)==null||e.minimize()}),t.ipcMain.handle("window:maximize",()=>{var e,s;(e=this.mainWindow)!=null&&e.isMaximized()?this.mainWindow.unmaximize():(s=this.mainWindow)==null||s.maximize()}),t.ipcMain.handle("window:close",()=>{var e;(e=this.mainWindow)==null||e.close()})}async initialize(){t.app.whenReady().then(()=>{this.setupIPC(),this.createWindow()}),t.app.on("window-all-closed",()=>{process.platform!=="darwin"&&t.app.quit()}),t.app.on("activate",async()=>{t.BrowserWindow.getAllWindows().length===0&&await this.createWindow()}),t.app.on("web-contents-created",(e,s)=>{s.on("new-window",n=>{n.preventDefault()}),s.setWindowOpenHandler(()=>({action:"deny"}))})}}const x=new j;x.initialize().catch(console.error);
