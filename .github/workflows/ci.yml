name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      run: |
        cd backend
        cp .env.example .env || echo "No .env.example found"
      env:
        SUPABASE_DB_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test-secret-key
        SUPABASE_SERVICE_KEY: test-service-key
        SUPABASE_PROJECT_URL: https://test.supabase.co

    - name: Run linting
      run: |
        cd backend
        flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run type checking
      run: |
        cd backend
        # Add mypy if needed in the future
        # mypy app

    - name: Run tests with coverage
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      env:
        SUPABASE_DB_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test-secret-key
        SUPABASE_SERVICE_KEY: test-service-key
        SUPABASE_PROJECT_URL: https://test.supabase.co

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  build-desktop-app:
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: desktop-app/package-lock.json

    - name: Install dependencies
      run: |
        cd desktop-app
        npm ci

    - name: Build desktop app
      run: |
        cd desktop-app
        npm run build

    - name: Build Electron installer
      run: |
        cd desktop-app
        npm run dist
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload installer artifact
      uses: actions/upload-artifact@v3
      with:
        name: windows-installer
        path: desktop-app/dist/*.exe
        retention-days: 30

  build-web-onboarding:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web-onboarding/package-lock.json

    - name: Install dependencies
      run: |
        cd web-onboarding
        npm ci

    - name: Build web app
      run: |
        cd web-onboarding
        npm run build
      env:
        VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:8000/api/v1' }}

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: web-onboarding-build
        path: web-onboarding/dist/
        retention-days: 30

  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/insightful-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/insightful-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push web onboarding Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./web-onboarding
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/insightful-onboarding:latest
          ${{ secrets.DOCKER_USERNAME }}/insightful-onboarding:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    runs-on: ubuntu-latest
    needs: [backend-tests, build-web-onboarding]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.backend-tests.result == 'success' && needs.build-web-onboarding.result == 'success' }}
      run: |
        echo "✅ All tests and builds completed successfully!"

    - name: Notify on failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.build-web-onboarding.result == 'failure' }}
      run: |
        echo "❌ Some tests or builds failed. Please check the logs."
        exit 1
