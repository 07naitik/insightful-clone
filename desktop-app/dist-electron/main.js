"use strict";var k=Object.create;var v=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var E=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var C=(o,r,a,e)=>{if(r&&typeof r=="object"||typeof r=="function")for(let s of F(r))!$.call(o,s)&&s!==a&&v(o,s,{get:()=>r[s],enumerable:!(e=P(r,s))||e.enumerable});return o};var z=(o,r,a)=>(a=o!=null?k(E(o)):{},C(r||!o||!o.__esModule?v(a,"default",{value:o,enumerable:!0}):a,o));const n=require("electron"),d=require("path"),x=require("keytar"),D=require("macaddress"),T=require("os"),A=require("fs");function p(o){const r=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(o){for(const a in o)if(a!=="default"){const e=Object.getOwnPropertyDescriptor(o,a);Object.defineProperty(r,a,e.get?e:{enumerable:!0,get:()=>o[a]})}}return r.default=o,Object.freeze(r)}const w=p(x),M=p(D),_=p(T),g=p(A),O=process.env.NODE_ENV==="development",f="insightful-time-tracker",y="auth-token",S=d.join(_.homedir(),".insightful-token");class q{constructor(){this.mainWindow=null,this.screenshotInterval=null}async createWindow(){this.mainWindow=new n.BrowserWindow({width:1e3,height:700,minWidth:800,minHeight:600,show:!1,titleBarStyle:"default",frame:!0,transparent:!1,resizable:!0,maximizable:!0,minimizable:!0,closable:!0,title:"Insightful Time Tracker",icon:d.join(__dirname,"../public/icon.png"),webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:d.join(__dirname,"preload.js"),webSecurity:!0,allowRunningInsecureContent:!1,experimentalFeatures:!1}}),O?(await this.mainWindow.loadURL("http://localhost:5173"),this.mainWindow.webContents.openDevTools()):await this.mainWindow.loadFile(d.join(__dirname,"../dist/index.html")),this.mainWindow.once("ready-to-show",()=>{var r;(r=this.mainWindow)==null||r.show()}),this.mainWindow.on("closed",()=>{this.mainWindow=null,this.screenshotInterval&&clearInterval(this.screenshotInterval)})}setupIPC(){n.ipcMain.handle("auth:store-token",async(e,s)=>{try{return await w.setPassword(f,y,s),{success:!0}}catch(t){console.error("Keytar failed, using file fallback:",t);try{return g.writeFileSync(S,s,{mode:384}),{success:!0}}catch(i){return console.error("File storage also failed:",i),{success:!1,error:i.message}}}}),n.ipcMain.handle("auth:get-token",async()=>{try{return{success:!0,token:await w.getPassword(f,y)}}catch(e){console.error("Keytar failed, using file fallback:",e);try{return g.existsSync(S)?{success:!0,token:g.readFileSync(S,"utf8")}:{success:!1,error:"No token found"}}catch(s){return console.error("File storage also failed:",s),{success:!1,error:s.message}}}}),n.ipcMain.handle("auth:remove-token",async()=>{try{return await w.deletePassword(f,y),{success:!0}}catch(e){return console.error("Failed to remove token:",e),{success:!1,error:e.message}}}),n.ipcMain.handle("system:get-network-info",async()=>{try{const e=_.networkInterfaces();let s="127.0.0.1";for(const[i,u]of Object.entries(e))if(u){for(const c of u)if(c.family==="IPv4"&&!c.internal){s=c.address;break}}const t=await new Promise((i,u)=>{M.one((c,h)=>{c?u(c):i(h)})});return{success:!0,ipAddress:s,macAddress:t}}catch(e){return console.error("Failed to get network info:",e),{success:!1,error:e.message,ipAddress:"127.0.0.1",macAddress:"00:00:00:00:00:00"}}}),n.ipcMain.handle("screenshot:capture",async()=>{try{console.log("Starting screenshot capture...");const e=process.platform==="linux"&&process.env.WSL_DISTRO_NAME;return console.log("Detected WSL environment:",!!e),e?await r():await a()}catch(e){return console.error("Failed to capture screenshot:",e),{success:!1,error:e.message,permission:!1}}});async function r(){const{exec:e}=require("child_process"),{promisify:s}=require("util"),t=s(e);try{console.log("Using Windows PowerShell screenshot method for WSL");const i=Date.now(),u=`/tmp/screenshot_${i}.png`,c=`/tmp/screenshot_${i}.ps1`,h=`C:\\temp\\screenshot_${i}.png`,l=`C:\\temp\\screenshot_${i}.ps1`;await t("mkdir -p /tmp"),await t('powershell.exe -Command "New-Item -ItemType Directory -Force -Path C:\\temp"');const m=`Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
$bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
$bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
$graphics = [System.Drawing.Graphics]::FromImage($bitmap)
$graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
$bitmap.Save('${h}', [System.Drawing.Imaging.ImageFormat]::Png)
$graphics.Dispose()
$bitmap.Dispose()
Write-Host "Screenshot saved to ${h}"`;console.log("Creating PowerShell script file..."),require("fs").writeFileSync(c,m,"utf8"),await t(`cp "${c}" "/mnt/c/temp/screenshot_${i}.ps1"`),console.log("Executing PowerShell script file..."),console.log("Script path:",l);const b=await t(`powershell.exe -ExecutionPolicy Bypass -File "${l}"`);console.log("PowerShell output:",b.stdout),console.log("Copying screenshot back to WSL..."),await t(`cp "/mnt/c/temp/screenshot_${i}.png" "${u}"`),console.log("Reading captured screenshot file...");const W=require("fs").readFileSync(u),I=W.toString("base64");return require("fs").unlinkSync(u),require("fs").unlinkSync(c),await t(`powershell.exe -Command "Remove-Item '${h}' -Force -ErrorAction SilentlyContinue"`),await t(`powershell.exe -Command "Remove-Item '${l}' -Force -ErrorAction SilentlyContinue"`),console.log("Screenshot captured successfully with PowerShell"),console.log("- Buffer size:",W.length,"bytes"),console.log("- Base64 length:",I.length),{success:!0,data:I,timestamp:new Date().toISOString(),permission:!0,source:"Windows PowerShell (WSL)",method:"powershell"}}catch(i){return console.error("PowerShell screenshot failed:",i),console.log("Falling back to Electron desktopCapturer..."),await a()}}async function a(){const{desktopCapturer:e}=await import("electron");console.log("Using Electron desktopCapturer method");const s=await e.getSources({types:["screen","window"],thumbnailSize:{width:1920,height:1080},fetchWindowIcons:!1});if(console.log("Found",s.length,"sources:"),s.forEach((l,m)=>{console.log(`Source ${m}:`,l.name,"id:",l.id)}),s.length===0)throw new Error("No displays found");let t=s.find(l=>l.name.includes("Entire screen")||l.name.includes("Screen"))||s[0];console.log("Using source:",t.name,"id:",t.id);const i=t.thumbnail,u=i.isEmpty();if(console.log("Thumbnail empty?",u,"size:",i.getSize()),u){console.log("Thumbnail is empty, trying alternative sources...");for(let l=1;l<s.length;l++){const m=s[l];if(console.log("Trying alternative source:",m.name),!m.thumbnail.isEmpty()){t=m,console.log("Found non-empty source:",t.name);break}}}const c=t.thumbnail.toPNG(),h=c.toString("base64");return console.log("Screenshot captured successfully with Electron"),console.log("- Source:",t.name),console.log("- Buffer size:",c.length,"bytes"),console.log("- Base64 length:",h.length),console.log("- Thumbnail size:",t.thumbnail.getSize()),{success:!0,data:h,timestamp:new Date().toISOString(),permission:!0,source:t.name,size:t.thumbnail.getSize(),method:"electron"}}n.ipcMain.handle("screenshot:start-schedule",async(e,s=5)=>{try{return this.screenshotInterval&&clearInterval(this.screenshotInterval),this.screenshotInterval=setInterval(()=>{var t;(t=this.mainWindow)==null||t.webContents.send("screenshot:trigger")},s*60*1e3),{success:!0}}catch(t){return console.error("Failed to start screenshot schedule:",t),{success:!1,error:t.message}}}),n.ipcMain.handle("screenshot:stop-schedule",async()=>{try{return this.screenshotInterval&&(clearInterval(this.screenshotInterval),this.screenshotInterval=null),{success:!0}}catch(e){return console.error("Failed to stop screenshot schedule:",e),{success:!1,error:e.message}}}),n.ipcMain.handle("fs:show-save-dialog",async(e,s)=>{try{return await n.dialog.showSaveDialog(this.mainWindow,s)}catch(t){return console.error("Failed to show save dialog:",t),{canceled:!0,error:t.message}}}),n.ipcMain.handle("shell:open-external",async(e,s)=>{try{return await n.shell.openExternal(s),{success:!0}}catch(t){return console.error("Failed to open external URL:",t),{success:!1,error:t.message}}}),n.ipcMain.handle("window:minimize",()=>{var e;(e=this.mainWindow)==null||e.minimize()}),n.ipcMain.handle("window:maximize",()=>{var e,s;(e=this.mainWindow)!=null&&e.isMaximized()?this.mainWindow.unmaximize():(s=this.mainWindow)==null||s.maximize()}),n.ipcMain.handle("window:close",()=>{var e;(e=this.mainWindow)==null||e.close()})}async initialize(){n.app.whenReady().then(()=>{this.setupIPC(),this.createWindow()}),n.app.on("window-all-closed",()=>{process.platform!=="darwin"&&n.app.quit()}),n.app.on("activate",async()=>{n.BrowserWindow.getAllWindows().length===0&&await this.createWindow()}),n.app.on("web-contents-created",(r,a)=>{a.on("new-window",e=>{e.preventDefault()}),a.setWindowOpenHandler(()=>({action:"deny"}))})}}const N=new q;N.initialize().catch(console.error);
